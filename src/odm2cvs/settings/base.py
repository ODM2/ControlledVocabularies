"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/

To setup the settings json file:
    1. rename settings_template.json to settings.json
    2. then write all the necessary data in it
    3. ???
    4. Profit!
"""

import sys
import json
from pathlib import Path

from typing import Dict, Any, TextIO, List, Tuple, Union


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR: Path = Path(__file__).resolve().parent.parent
config: Dict[str, Any] = {}

try:
    data_file: TextIO
    with open(BASE_DIR / 'settings' / 'settings.json') as data_file:
        config = json.load(data_file)
except IOError as ioe:
    sys.exit('You need to setup the settings data file (see instructions in base.py file.)')


try:
    SECRET_KEY: str = config['secret_key']
except KeyError:
    exit('The secret key is required in the settings.json file.')

ALLOWED_HOSTS: List[str] = []


# Application definition

INSTALLED_APPS: List[str] = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'cvservices',
    'cvinterface',
]

MIDDLEWARE: List[str] = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'odm2cvs.urls'

TEMPLATES: List[Dict[str, Any]] = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'cvinterface' / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION: str = 'odm2cvs.wsgi.application'


# Databases
DATABASES: Dict[str, Dict[str, Any]] = {}
for database in config.get('databases'):
    DATABASES[database.get('name')] = {
        'ENGINE': database.get('engine'),
        'NAME': database.get('schema'),
        'USER': database.get('user', ''),
        'PASSWORD': database.get('password', ''),
        'HOST': database.get('host', ''),
        'PORT': database.get('port', ''),
        'OPTIONS': database.get('options', {})
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: List[Dict[str, str]] = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization

TIME_ZONE: str = 'UTC'

USE_L10N: bool = True

USE_TZ: bool = True

SITE_ID: int = 1

static_config: Dict = config.get('static', {})
STATIC_ROOT: str = static_config.get('root', '')
STATIC_URL: str = static_config.get('url', '')

email_config: Dict = config.get('email', {})
EMAIL_HOST: str = email_config.get('host', '')
EMAIL_SENDER: str = email_config.get('sender', '')
EMAIL_RECIPIENTS: List[str] = email_config.get('recipients', [])

recaptcha_config: Dict = config.get('recaptcha', {})
RECAPTCHA_KEY: str = recaptcha_config.get('secret_key', '')
RECAPTCHA_USER_KEY: str = recaptcha_config.get('user_key', '')
RECAPTCHA_VERIFY_URL: str = 'https://www.google.com/recaptcha/api/siteverify'

DATABASE_ROUTERS: List[str] = ['odm2cvs.db_routers.ControlledVocabularyRouter']
